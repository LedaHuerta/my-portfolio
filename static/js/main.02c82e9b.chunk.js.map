{"version":3,"sources":["pages/Home.jsx","pages/About.jsx","pages/Career.jsx","pages/Contact.jsx","pages/Portfolio.jsx","components/ToolbarNav/ResponsiveNavigation.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Home","Component","About","Career","Contact","Portfolio","ResponsiveNavigation","navLinks","background","hoverBackground","linkColor","logo","console","log","className","style","src","alt","map","link","index","key","to","path","color","text","icon","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAYeA,E,iLARP,OACI,6BACI,wC,GAJGC,aCUJC,E,iLARP,OACI,0C,GAHQD,aCULE,E,iLARP,OACI,2C,GAHSF,aCUNG,E,iLARP,OACI,4C,GAHUH,aCUPI,E,iLARP,OACI,8C,GAHYJ,aCgCTK,MA7Bf,YAAwF,IAAxDC,EAAuD,EAAvDA,SAAUC,EAA6C,EAA7CA,WAAYC,EAAiC,EAAjCA,gBAAgBC,EAAiB,EAAjBA,UAAUC,EAAO,EAAPA,KAI5E,OADAC,QAAQC,IAAIL,EAAYC,EAAgBC,EAAUC,GAE9C,yBACAG,UAAU,qBACVC,MAAS,CAACP,eACN,wBAAIO,MAAS,CAACP,eACV,gCACI,yBAAKQ,IAAI,4BAA4BC,IAAI,UAE5CV,EAASW,KAAI,SAACC,EAAMC,GAAP,OACd,wBAAIC,IAAG,2BAAsBD,IAKzB,kBAAC,IAAD,CAAME,GAAIH,EAAKI,KAAMR,MAAO,CAACS,MAAOd,IAC/BS,EAAKM,KACN,uBAAGX,UAAYK,EAAKO,e,MC+B7BC,MA7Cf,WA4BE,OAAS,yBACJb,UAAY,OACf,kBAAC,EAAD,CACAP,SA9BiB,CACnB,CACUkB,KAAM,SACNF,KAAM,QACNG,KAAM,gBAEV,CACID,KAAM,WACNF,KAAM,WACNG,KAAM,sCAEV,CACID,KAAM,aACNF,KAAM,aACNG,KAAM,qBAEV,CACID,KAAM,cACNF,KAAM,eACNG,KAAM,kBAEV,CACID,KAAM,WACNF,KAAM,WACNG,KAAM,mBASd,kBAAC,IAAD,KACC,kBAAC,EAAD,CAAMH,KAAK,UACX,kBAAC,EAAD,CAAOA,KAAK,WACZ,kBAAC,EAAD,CAAQA,KAAK,iBACb,kBAAC,EAAD,CAASA,KAAK,aACd,kBAAC,EAAD,CAAWA,KAAK,kBCtCDK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.02c82e9b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <p>home</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                About\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About;","import React, {Component} from 'react';\r\n\r\nclass Career extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                Career\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Career;","import React, {Component} from 'react';\r\n\r\nclass Contact extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                Contact\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact;","import React, {Component} from 'react';\r\n\r\nclass Portfolio extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                Portfolio\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Portfolio;","// import React, {useState} from 'react';\r\nimport React from 'react';\r\nimport {Link} from '@reach/router'\r\n\r\n\r\nfunction ResponsiveNavigation ({navLinks, background, hoverBackground,linkColor,logo}) {\r\n    // const {hoverIndex, setHoverIndex} = useState(-1);\r\n    // const {navOpen, setNavOpen} = useState(false);\r\n    console.log(background, hoverBackground,linkColor,logo)\r\n    return (    \r\n        <nav \r\n        className=\"responsive-toolbar\"\r\n        style = {{background}}>\r\n            <ul style = {{background}}>\r\n                <figure>\r\n                    <img src=\"src/img/rectanglelogo.png\" alt=\"logo\"/>\r\n                </figure>\r\n                {navLinks.map((link, index) => \r\n                <li key={`linkResponsiveNav${index}`} \r\n                    // onMouseEnter={() => setHoverIndex(index)}\r\n                    // onMouseLeave={() => {setHoverIndex(-1)}}\r\n                    // style={{background: hoverIndex !== index ? (hoverBackground= {BackgroundColor:'#999999'}) : ''}}\r\n                    >\r\n                    <Link to={link.path} style={{color: linkColor}}>\r\n                        {link.text}\r\n                        <i className= {link.icon}/>\r\n                    </Link>\r\n                </li>\r\n                )}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default ResponsiveNavigation;\r\n","import React from 'react';\nimport {Router} from '@reach/router'\nimport Home from './pages/Home'\nimport About from './pages/About'\nimport Career from './pages/Career'\nimport Contact from './pages/Contact'\nimport Portfolio from './pages/Portfolio'\nimport ResponsiveNavigation from './components/ToolbarNav/ResponsiveNavigation'\n// import logo from './img/rectanglelogo'\nimport './App.css';\n\nfunction App() {\n    const navLinks = [\n\t\t{\n            text: 'Inicio',\n            path: '/Home',\n            icon: 'ion-ios-home'\n        },\n        {\n            text: 'Sobre Mi',\n            path: '/contact',\n            icon: 'ion-ios-information-circle-outline'\n        },\n        {\n            text: 'Portafolio',\n            path: '/portfolio',\n            icon: 'ion-ios-briefcase'\n        },\n        {\n            text: 'Trayectoria',\n            path: '/career-path',\n            icon: 'ion-ios-ribbon'\n        },\n        {\n            text: 'Contacto',\n            path: '/contact',\n            icon: 'ion-ios-mail'\n        },\n    ]\n\t\treturn ( <\n\t\t\tdiv className = \"App\" >\n\t\t\t\t<ResponsiveNavigation\n\t\t\t\tnavLinks = {navLinks}\n\t\t\t\t// logo = {logo}\n\t\t\t\t/>\n\t\t\t\t<Router>\n\t\t\t\t\t<Home path=\"/Home\"/>\n\t\t\t\t\t<About path=\"/about\"/>\n\t\t\t\t\t<Career path=\"/career-path\"/>\n\t\t\t\t\t<Contact path=\"/contact\"/>\n\t\t\t\t\t<Portfolio path=\"/portfolio\"/>\n\t\t\t\t</Router>\n\t\t\t</div>\n\t\t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/scss/base.scss'\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}